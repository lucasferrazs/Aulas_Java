package _2estruturaDaAplicacaoFX;


/*
 O ciclo de vida de uma aplicação JavaFX é composto por várias etapas 
 que gerenciam a execução do aplicativo desde o seu início até o término. 
 Aqui está um resumo das principais fases: 
 
 
Inicialização (init): Esta é a primeira fase, onde o método init é chamado. 
Aqui, você pode colocar código de inicialização que precisa ser executado antes 
que a aplicação comece, como a configuração de variáveis ou a criação de recursos 
que serão usados pela aplicação.

Início (start): Após a inicialização, o método start é invocado. Este é o ponto de 
entrada principal da sua aplicação JavaFX. Aqui, você deve começar a montar a cena 
(Scene) e o palco (Stage) da sua aplicação, definindo elementos como painéis, 
botões e outros componentes da interface gráfica.

Execução: Durante a execução, a aplicação está ativa e interagindo com o usuário. 
Eventos são processados, e a interface gráfica é atualizada conforme necessário.

Parada (stop): Quando a aplicação está prestes a ser fechada, o método stop é chamado. 
Este é o lugar para liberar quaisquer recursos e fazer a limpeza final antes que a aplicação seja encerrada.
 */
	
	
	import javafx.application.Application;
	import javafx.scene.Scene;
	import javafx.scene.control.Label;
	import javafx.scene.layout.StackPane;
	import javafx.stage.Stage;

	public class Main extends Application {

	    // Método init()
	    @Override
	    public void init() {
	        System.out.println("Dentro do método init()");
	        // Código de inicialização aqui
	    }

	    // Método start(), ponto de entrada principal
	    @Override
	    public void start(Stage primaryStage) {
	        System.out.println("Dentro do método start()");

	        // Criando um componente de interface (UI component)
	        Label label = new Label("Olá, mundo do JavaFX!");

	        // Preparando o layout
	        StackPane root = new StackPane();
	        root.getChildren().add(label);

	        // Configurando a cena
	        Scene scene = new Scene(root, 300, 250);

	        // Configurando o palco
	        primaryStage.setTitle("Exemplo JavaFX");
	        primaryStage.setScene(scene);
	        primaryStage.show();
	    }

	    // Método stop()
	    @Override
	    public void stop() {
	        System.out.println("Dentro do método stop()");
	        // Código de limpeza aqui
	    }

	    public static void main(String[] args) {
	        launch(args);
	    }
	}
	
	/*
Classe Main

A classe Main estende Application, que é a classe base para aplicativos JavaFX.

Método init()

O método init() é chamado antes do método start(). Ele é usado para inicializar recursos ou realizar tarefas de inicialização antes de criar a interface do usuário.

No exemplo, o método init() simplesmente imprime uma mensagem na console indicando que está dentro do método init().
Você pode adicionar código de inicialização aqui, como carregar recursos ou configurar parâmetros do aplicativo.
Método start()

O método start() é o ponto de entrada principal do aplicativo. Ele é chamado após o método init() e é responsável por criar a interface do usuário.

No exemplo, o método start():
Cria um Label com o texto "Olá, mundo do JavaFX!".
Cria um StackPane que é um contêiner de layout que pode conter vários nodes.
Adiciona o Label ao StackPane usando o método getChildren().add().
Cria uma Scene com o StackPane como nó raiz e define o tamanho da cena como 300x250 pixels.
Configura o Stage (janela) com o título "Exemplo JavaFX" e define a cena criada anteriormente.
Mostra a janela com o método show().
Método stop()

O método stop() é chamado quando o aplicativo é fechado. Ele é usado para realizar tarefas de limpeza ou fechar recursos.

No exemplo, o método stop() simplesmente imprime uma mensagem na console indicando que está dentro do método stop().
Você pode adicionar código de limpeza aqui, como fechar conexões de banco de dados ou liberar recursos.
Método main()

O método main() é o ponto de entrada do aplicativo quando ele é executado a partir da linha de comando. Ele chama o método launch() para iniciar o aplicativo.

No exemplo, o método main() simplesmente chama o método launch() com os argumentos da linha de comando.
Resumo

O código cria um aplicativo JavaFX que:

Inicializa recursos no método init().
Cria a interface do usuário no método start().
Mostra a janela com o método show().
Realiza tarefas de limpeza no método stop() quando o aplicativo é fechado.
	 */


